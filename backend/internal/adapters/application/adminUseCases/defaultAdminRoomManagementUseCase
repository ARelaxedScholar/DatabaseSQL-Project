package adminUseCases

import (
	"github.com/sql-project-backend/internal/models"
	"github.com/sql-project-backend/internal/models/dto"
	"github.com/sql-project-backend/internal/ports"
)

type DefaultAdminRoomManagementUseCase struct {
	roomService ports.RoomService
}

func NewAdminRoomManagementCase(roomService ports.RoomService) ports.AdminRoomManagementCase {
	return &DefaultAdminRoomManagementUseCase{
		roomService: roomService,
	}
}

func (uc *DefaultAdminRoomManagementUseCase) AddRoom(input dto.RoomInput) (dto.RoomOutput, error) {
	room, err := uc.roomService.AddRoom(
		input.ID,
		input.HotelID,
		input.Capacity,
		input.Floor,
		input.Price,
		input.Telephone,
		convertViewTypes(input.ViewTypes),
		input.RoomType,
		input.IsExtensible,
		convertAmenities(input.Amenities),
	)
	if err != nil {
		return dto.RoomOutput{}, err
	}
	return mapRoomToOutput(room), nil
}

func (uc *DefaultAdminRoomManagementUseCase) UpdateRoom(input dto.RoomUpdateInput) (dto.RoomOutput, error) {
	room, err := uc.roomService.UpdateRoom(
		input.ID,
		input.HotelID,
		input.Capacity,
		input.Floor,
		input.Price,
		input.Telephone,
		convertViewTypes(input.ViewTypes),
		input.RoomType,
		input.IsExtensible,
		convertAmenities(input.Amenities),
	)
	if err != nil {
		return dto.RoomOutput{}, err
	}
	return mapRoomToOutput(room), nil
}

func (uc *DefaultAdminRoomManagementUseCase) DeleteRoom(roomID int) error {
	return uc.roomService.DeleteRoom(roomID)
}

func mapRoomToOutput(room *models.Room) dto.RoomOutput {
	var viewTypes []string
	for vt := range room.ViewTypes {
		viewTypes = append(viewTypes, vt.String())
	}
	var amenities []string
	for a := range room.Amenities {
		amenities = append(amenities, a.String())
	}
	return dto.RoomOutput{
		RoomID:       room.ID,
		HotelID:      room.HotelID,
		Capacity:     room.Capacity,
		Floor:        room.Floor,
		Price:        room.Price,
		Telephone:    room.Telephone,
		ViewTypes:    viewTypes,
		RoomType:     room.RoomType.String(),
		IsExtensible: room.IsExtensible,
		Amenities:    amenities,
	}
}

func convertViewTypes(input []string) map[models.ViewType]struct{} {
	vtMap := make(map[models.ViewType]struct{})
	for _, v := range input {
		vtMap[models.ParseViewType(v)] = struct{}{}
	}
	return vtMap
}

func convertAmenities(input []string) map[models.Amenity]struct{} {
	amenitiesMap := make(map[models.Amenity]struct{})
	for _, a := range input {
		amenitiesMap[models.ParseAmenity(a)] = struct{}{}
	}
	return amenitiesMap
}
